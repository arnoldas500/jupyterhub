JupyterHub overview: With JupyterHub you can create a multi-user Hub which spawns, manages, and proxies multiple instances of the single-user Jupyter notebook (IPython notebook) server.
 
What is a Jupyter Notebook:
Something that lets you run python code as well as other languages like R octal ect in your web browser
 
You can have text blocks, note blocks and code blocks, you can tweek it and run it on the fly. Good option to present people with a uniform environment.
 
Why use Jupyterhub:
A jupyterhub takes that notebook and expands it. So you still have users accessing the hub from a web browser just like the jupyter notebook but now you have a server that has a database with a spawner and an authenticator for users. You can now have users log into the environment where you have all your configurations done and all your data already in there for everyone to see and use.
 
Takes out the headache of having people to install all of the packages and languages that you are using, so no matter if you're using a windows machine or linux or a mac everyone will be able to run everything without a glitch because all you need is a browser and everything else like the installation, the version of the language and libraries and other dependencies are now taken care of already in the jupyterhub server.
 
Gcc will also be needed for installing jupyterhub properly.
 
Things to consider before installation:
Jupyterhub install location should be in something like /srv/jupyterhub. After creating the folder the first thing you should do is cd into it and own it by doing sudo chown xcite . < dont forget the (dot)!
Python install location and path is: /opt/anaconda/anaconda3/envs/jupyterhubEnv/bin/python
Reason for this is so it can be accessaed accross all users on the server and not just the local users. Same with python 2, should have kernals for all users in the hub so need to have the path be avialable for all users not just local ones.
 
Make sure you have ipykernel installed and use ipython kernel install to drop the kernelspec in the right location for python2. Then ipython3 kernel install for Python3. Now you should be able to chose between the 2 kernels regardless of whether you use jupyter notebook, ipython notebook or ipython3 notebook
 
Anaconda location and path should be: /opt/anaconda/anaconda3/bin/anaconda
Again for the same reason that it needs to be avialable for all users. All the python packages you downloaded should be avialable to all users in the hub. You dont want to have to download a seperate python packages individually for each person. That would be a huge pain!
 
What you can do is create an Anaconda jupyterhub environment, then lets say if you named it jupyterhubEnv you can just do source jupyterhubEnv and have the path of that environment in /opt/ also to be avialable to all users and now when you start jupyterhub everyuser will have access to the same packages and languages.
 
Another thing you will need to do is to bind allow node to bind to port 80 without using sudo. You can do this by using setcap cap_net_bind_service=+ep. Since we will have our jupyterhubEnv active we can run sudo setcap cap_net_bind_service=+ep /opt/anaconda/anaconda3/envs/jupyterhubEnv/bin/node once that is done we can then run: 
sudo /opt/anaconda/anaconda3/bin/npm install -g configurable-http-proxy which will be needed for docker to run properly. To see which ip address docker is running you can run ifconfig and you will see the address under docker0 which we will need to set in the configuration file for jupyterhub. To install the configurable-http-proxy package globally using npm: npm install -g configurable-http-proxy which is actually the better way to go about it.
 
 
You will also need some sort of text editor. I choose to use emacs which i also needed to install. Git is something you will need to install to pull the latest version of jupyterhub, letsencrypt and dockerspwaner. Once you have letsencrypt you need to activate it by going into the folder and running ./letsencrypt-auto certonly --standalone -d appsvr.asrc.cestm.albany.edu where appsvr.asrc.cestm.albany.edu is your domain name. Once that is done it will ask for some basic info like email name organization ect. Which will then generate the cert and key you will need to use in the jupyterhub_config.py file. For letsencrypt to work automatically you will need to change the permissions of the archive and live folder which are located in /etc/letsencrypt. To do this simply cd into the folder and run the two commands:
 sudo chmod 777 -R archive/
 And
 sudo chmod 777 -R live/
 
 
Once you have all the prerequisets installed then you can run jupyterhub --generate-config to generate an empty configuration file where you will customize everything from user list to using docker spawner.
 
Requirements:
Python 3.3 or greater (and pip) 
Ipykernel 
nodesjs/npm, install with: sudo apt-get install npm nodejs-legacy (install nodejs first then get npm)
Any unix server (will need to take care of security since it will be run over internet) for security you can use letsencrypt to set up ssl to use https
TLS certificate and key for HTTPS communication
Domain name : appsvr.asrc.cestm.albany.edu
Default authenticator: PAM which uses the user accounts that are stored on the server of which jupyterhub is running on.
If we keep the default authenticator we will need to create a user account on the system for each user.
Default spawners: starts a notebook server on the same machine running under their system username (one dedicated server per user). Other option would be using Docker which would start each server in a separate container.
Should set up SSL encryption if will be running on a public network
Default proxy listens on all public intergaces on port 8000
Folders and File Locations
/srv/jupyterhub for all security and runtime files
/etc/jupyterhub for all configuration files
/var/log for log files
The Proxyâ€™s main IP address setting determines where JupyterHub is available to users. (to change the IP address and port):
jupyterhub --ip=192.168.1.2 --port=443
Or by setting it in the config file:
c.JupyterHub.ip = '192.168.1.2'
c.JupyterHub.port = 443
 
Security config requirenments:
SSL encryption (to enable HTTPS)
After installing a key and certification that we can get for free from https://letsencrypt.org/ then we need to specify their locations in the config file as: c.JupyterHub.ssl_key = '/path/to/my.key'
       c.JupyterHub.ssl_cert = '/path/to/my.cert'
IF we use letsencrypt with default options:
c.JupyterHub.ssl_key = '/etc/letsencrypt/live/{mydomain.tld}/privkey.pem'
c.JupyterHub.ssl_cert = '/etc/letsencrypt/live/{mydomain.tld}/fullchain.pem'
Where mydomain.tld is replaced by our fully qualified domain name
Cookie secret (a key for encrypting browser cookies)
Stored in config file : c.JupyterHub.cookie_secret_file = '/srv/jupyterhub/cookie_secret'
The content of this file should be 32 random bytes, encoded as hex. An example would be to generate this file with: openssl rand -hex 32 > /srv/jupyterhub/cookie_secret
Should store it in /srv/jupyterhub/cookie_secret
Proxy authentication token (used for the Hub and other services to authenticate to the Proxy)
Can set up in config file: jupyterhub_config.py
Use values for file: c.JupyterHub.proxy_auth_token = '0bc02bede919e99a26de1e2a7a5aadfaf6228de836ec39a05a6c6942831d8fe5'


Creating a whitelist to restrict which users are allowed to login 
Users listed in the whitelist are added to the Hub database when the Hub is started
Authenticator.whitelist:
c.Authenticator.whitelist = {'mal', 'zoe', 'inara', 'kaylee'}
 
 
 
Using Jupyterhub:
Jupyterhub will be accessed through a web browser using either an IP address or domain name of the server.
To start jupyterhub with default configuration run:
sudo jupyterhub
Any user on the system with a password will be allowed to start a single user notebook server
Can reach jupyterhub through(unless default proxy changed):
http://localhost:8000
By default, starting JupyterHub will write two files to disk in the current working directory:
jupyterhub.sqlite is the sqlite database containing all of the state of the Hub. This file allows the Hub to remember what users are running and where, as well as other information enabling you to restart parts of JupyterHub separately. It is important to note that this database contains no sensitive information other than Hub usernames.
jupyterhub_cookie_secret is the encryption key used for securing cookies. This file needs to persist in order for restarting the Hub server to avoid invalidating cookies. Conversely, deleting this file and restarting the server effectively invalidates all login cookies.
 
 
